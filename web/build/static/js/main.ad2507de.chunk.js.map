{"version":3,"sources":["components/cart/cart.js","components/app.js","components/admin/login.js","App.js","serviceWorker.js","index.js"],"names":["Cart","M","Sidenav","init","this","edge","draggable","inDuration","outDuration","preventScrolling","Fragment","id","className","ref","href","icon","faShoppingCart","data-target","Component","App","state","showForm","display","width","style","backgroundColor","Login","props","console","log","type","htmlFor","onClick","history","push","exact","path","component","Application","AdminLogin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0XAoDeA,E,4LAlCPC,IAAEC,QAAQC,KAAKC,KAAKF,QAPJ,CACbG,KAAM,QACNC,WAAY,EACZC,WAAY,IACZC,YAAc,IACdC,kBAAmB,M,+BAMhB,IAAD,OACL,OACI,kBAAC,IAAMC,SAAP,KACA,wBAAIC,GAAG,YACNC,UAAU,UACVC,IAAK,SAAAX,GACE,EAAKA,QAAUA,IAGf,4BACI,yBAAKU,UAAU,aACX,uBAAGE,KAAK,SAAQ,0BAAMF,UAAU,mBAAhB,aAChB,uBAAGE,KAAK,UAAS,0BAAMF,UAAU,oBAAhB,0BAGzB,4BAAI,uBAAGE,KAAK,MAAR,gBACJ,4BAAI,yBAAKF,UAAU,aACnB,4BAAI,uBAAGA,UAAU,eAAeE,KAAK,MAAjC,2BAEZ,kBAAC,IAAD,CACIF,UAAU,+BACVG,KAAMC,IACNC,cAAY,mB,GApCTC,aCiCJC,E,2MAjCbC,MAAQ,CACNC,UAAU,EACVC,SAAS,EACTC,MAAO,K,wEAKP,OACE,kBAAC,IAAMb,SAAP,KACE,yBAAKC,GAAG,OAAOC,UAAU,mBACvB,6BACE,yBACEA,UAAU,cACVY,MAAO,CACLC,gBAAiB,YAGnB,uBAAGX,KAAK,IAAIF,UAAU,cAAtB,oBAGA,wBAAID,GAAG,aAAaC,UAAU,SAC5B,kBAAC,EAAD,e,GAvBEM,a,eC6CHQ,EAhDD,SAACC,GACXC,QAAQC,IAAI,sBAAuBF,GAMrC,OACE,yBAAKf,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,2BAAd,eACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAOD,GAAG,QAAQmB,KAAK,UACvB,2BAAOC,QAAQ,SAAf,WAGJ,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAOD,GAAG,WAAWmB,KAAK,aAC1B,2BAAOC,QAAQ,YAAf,eAIN,yBAAKnB,UAAU,4BACb,4BACEA,UAAU,wCACVY,MAAO,CACLC,gBAAiB,UACjBF,MAAO,QAETS,QAhCK,WACfL,EAAMM,QAAQC,KAAK,OAyBX,gBChBDf,E,iLAVX,OACE,kBAAC,IAAD,KACE,yBAAKP,UAAU,WACb,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,U,GANxBrB,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad2507de.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from \"react\";\nimport M from \"materialize-css\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faShoppingCart } from '@fortawesome/free-solid-svg-icons'\n\n\nclass Cart extends Component {\n\n    componentDidMount() {\n        const options = {\n           edge: 'right',\n           draggable : true,\n           inDuration: 250,\n           outDuration : 200,\n           preventScrolling : true\n        };\n        M.Sidenav.init(this.Sidenav, options);\n      };\n\n\n    render() {\n        return (\n            <React.Fragment>\n            <ul id=\"slide-out\"\n             className=\"sidenav\"\n             ref={Sidenav => {\n                    this.Sidenav = Sidenav;\n                }}\n             >\n                    <li>\n                        <div className=\"user-view\">\n                            <a href=\"#name\"><span className=\"white-text name\">John Doe</span></a>\n                            <a href=\"#email\"><span className=\"white-text email\">jdandturk@gmail.com</span></a>\n                        </div>\n                    </li>\n                    <li><a href=\"#!\">Second Link</a></li>\n                    <li><div className=\"divider\"></div></li>\n                    <li><a className=\"waves-effect\" href=\"#!\">Third Link With Waves</a></li>\n            </ul>\n            <FontAwesomeIcon \n                className=\"fa-2x cursor sidenav-trigger\"\n                icon={faShoppingCart}\n                data-target=\"slide-out\"\n            />\n        </React.Fragment>\n        );\n       \n    }\n}\n\nexport default Cart;","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable no-script-url */\nimport React, { Component } from \"react\";\nimport \"./style.css\";\nimport Cart from \"./cart/cart\";\n\n\nclass App extends Component {\n  state = {\n    showForm: false,\n    display: false,\n    width: 250,\n  };\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <div id=\"main\" className=\"container-fluid\">\n          <nav>\n            <div\n              className=\"nav-wrapper\"\n              style={{\n                backgroundColor: \"#a3b745\",\n              }}\n            >\n              <a href=\"#\" className=\"brand-logo\">\n                Agro Food Orders\n              </a>\n              <ul id=\"nav-mobile\" className=\"right\">\n                <Cart />\n              </ul>\n            </div>\n          </nav>\n        </div>\n      </React.Fragment>\n    );\n  }\n};\n\n\nexport default App;\n","import React from \"react\";\n\n\n\nconst Login = (props) => {\n    console.log(\"PROPS IN LOGIN PAGE\", props);\n\n    const adminLogin = () => {\n        props.history.push(\"/\"); //redirecting\n    };\n\n  return (\n    <div className=\"valign-wrapper\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6 offset-m3\">\n            <div className=\"card darken-1\">\n              <div className=\"card-content\">\n                <h4 className=\"card-title center-align\">Admin Login</h4>\n                <div className=\"row\">\n                  <div className=\"input-field col s12\">\n                    <input id=\"email\" type=\"email\" />\n                    <label htmlFor=\"email\">Email</label>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"input-field col s12\">\n                    <input id=\"password\" type=\"password\"/>\n                    <label htmlFor=\"password\">Password</label>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-action center-align\">\n                <button\n                  className=\"btn btn-block waves-effect wave-light\"\n                  style={{\n                    backgroundColor: \"#a3b745\",\n                    width: \"100%\",\n                  }}\n                  onClick={adminLogin}\n                >\n                  Login\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport Application from \"./components/app.js\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport AdminLogin from \"./components/admin/login\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"content\">\n          <Route exact path=\"/\" component={Application} />\n          <Route path=\"/admin\" component={AdminLogin} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"materialize-css/dist/css/materialize.min.css\";\nimport \"materialize-css/dist/js/materialize.min.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\n\n// fix for the footer\n// https://medium.com/@stefanmaretic/react-sticky-footer-f842d5fbd68\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}